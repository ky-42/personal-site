pipeline {
    agent {
        docker {
            image 'rust:1-slim-buster'
            args '-u root -e CC_x86_64_unknown_linux_musl=x86_64-linux-gnu-gcc'
        }
    }

    stages {
        // TODO set up testing problem is we need an env with postgres setup
        // stage('test') {
        //     steps {
        //         dir('backend') {
        //             sh 'cargo test'
        //         }
        //     }
        // }
        
        stage('build') {
            steps {
                dir('backend') {
                    sh 'export CC_x86_64_unknown_linux_musl=x86_64-linux-gnu-gcc'
                    sh 'dpkg --add-architecture amd64'
                    sh 'apt-get update'
                    sh 'apt-get install -y libpq-dev:amd64 build-essential gcc-x86-64-linux-gnu'
                    sh 'rustup target add x86_64-unknown-linux-musl'
                    sh 'cargo build --release --target=x86_64-unknown-linux-musl'
                    sh 'ls target'
                    sh 'ls target/release'
                }
            }
        }
        stage('deploy') {
            steps {
                dir('backend') {
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        alwaysPublishFromMaster: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: "${env.SSH_CONFIG_NAME}",
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        execCommand: "rm backend/backend"
                                    ),
                                    sshTransfer(
                                        sourceFiles: "target/release/backend",
                                        removePrefix: "target/release/",
                                        execCommand: "systemctl restart backend-bin.service"
                                    )
                                ]
                            )
                        ]
                    )    
                }
            }
        }
    }
}
